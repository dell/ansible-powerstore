#!/usr/bin/python
# Copyright: (c) 2019-2021, DellEMC
# Apache License version 2.0 (see MODULE-LICENSE or http://www.apache.org/licenses/LICENSE-2.0.txt)

from __future__ import absolute_import, division, print_function

__metaclass__ = type
ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'
                    }

DOCUMENTATION = r'''
---
module: dellemc_powerstore_host
version_added: '1.0.0'
short_description:  Manage host on PowerStore storage system.
description:
- Managing host on PowerStore storage system includes create host with a
  set of initiators, add/remove initiators from host, rename host and
  delete host.
author:
- Manisha Agrawal (@agrawm3) <ansible.team@dell.com>
extends_documentation_fragment:
  - dellemc.powerstore.dellemc_powerstore.powerstore
options:
  host_name:
    description:
    - The host name. This value must contain 128 or fewer printable Unicode
      characters.
    - Creation of an empty host is not allowed.
    - Required when creating a host.
    - Use either host_id or host_name for modify and delete tasks.
    type: str
  host_id:
    description:
    - The 36 character long host id automatically generated when a host is
      created.
    - Use either host_id or host_name for modify and delete tasks.
    - host_id cannot be used while creating host, as it is generated by the
      array after creation of host.
    required: False
    type: str
  os_type:
      description:
      - Operating system of the host.
      - Required when creating a host
      - OS type cannot be modified for a given host.
      choices: ['Windows', 'Linux', 'ESXi', 'AIX', 'HP-UX', 'Solaris']
      type: str
  initiators:
      description:
      - List of Initiator WWN or IQN to be added or removed from the host.
      - Subordinate initiators in a host can only be of one type, either FC or
       iSCSI.
      - Required when creating a host.
      type: list
      elements: str
  state:
    description:
    - Define whether the host should exist or not.
    - present - indicates that the host should exist in system.
    - absent - indicates that the host should not exist in system.
    required: true
    choices: ['absent', 'present']
    type: str
  initiator_state:
    description:
    - Define whether the initiators should be present or absent in host.
    - present-in-host - indicates that the initiators should exist on host.
    - absent-in-host - indicates that the initiators should not exist on host.
    - Required when creating a host with initiators or adding/removing
      initiators to/from existing host.
    choices: ['present-in-host', 'absent-in-host']
    type: str
  new_name:
    description:
    - The new name of host for renaming function. This value must contain 128
      or fewer printable Unicode characters.
    - Cannot be specified when creating a host.
    type: str

notes:
- Only completely and correctly configured iSCSI initiators can be associated with a host.

'''
EXAMPLES = r'''
  - name: Create host
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{host_name}}"
      os_type: 'Windows'
      initiators:
        -21:00:00:24:ff:31:e9:fc
      state: 'present'
      initiator_state: 'present-in-host'

  - name: Get host details by name
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{host_name}}"
      state: 'present'

  - name: Get host details by id
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_id: "{{host_id}}"
      state: 'present'

  - name: Add initiators to host
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{host_name}}"
      initiators:
        -21:00:00:24:ff:31:e9:ee
      initiator_state: 'present-in-host'
      state: 'present'

  - name: Remove initiators from host
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{host_name}}"
      initiators:
        -21:00:00:24:ff:31:e9:ee
      initiator_state: 'absent-in-host'
      state: 'present'

  - name: Rename host
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{host_name}}"
      new_name: "{{new_host_name}}"
      state: 'present'

  - name: Delete host
    dellemc_powerstore_host:
      array_ip: "{{array_ip}}"
      verifycert: "{{verifycert}}"
      user: "{{user}}"
      password: "{{password}}"
      host_name: "{{new_host_name}}"
      state: 'absent'
'''

RETURN = r'''

changed:
    description: Whether or not the resource has changed.
    returned: always
    type: bool

host_details:
    description: Details of the host.
    returned: When host exists
    type: complex
    contains:
        id:
            description: The system generated ID given to the host.
            type: str
        name:
            description: Name of the host.
            type: str
        description:
            description: Description about the host.
            type: str
        host_group_id:
            description: The host group ID of host.
            type: str
        os_type:
            description: The os type of the host.
            type: str
        host_initiators:
            description: The initiator details of this host.
            type: complex
            contains:
                port_name:
                    description: Name of the port.
                    type: str
                port_type:
                    description: The type of the port.
                    type: str
'''

from ansible.module_utils.basic import AnsibleModule
from ansible_collections.dellemc.powerstore.plugins.module_utils.storage.dell\
    import dellemc_ansible_powerstore_utils as utils
import logging

LOG = utils.get_logger('dellemc_powerstore_host', log_devel=logging.INFO)

py4ps_sdk = utils.has_pyu4ps_sdk()
HAS_PY4PS = py4ps_sdk['HAS_Py4PS']
IMPORT_ERROR = py4ps_sdk['Error_message']

py4ps_version = utils.py4ps_version_check()
IS_SUPPORTED_PY4PS_VERSION = py4ps_version['supported_version']
VERSION_ERROR = py4ps_version['unsupported_version_message']

# Application type
APPLICATION_TYPE = 'Ansible/1.3.0'


class PowerStoreHost(object):
    '''Class with host(initiator group) operations'''

    def __init__(self):
        # Define all parameters required by this module
        self.module_params = utils.get_powerstore_management_host_parameters()
        self.module_params.update(self.get_powerstore_host_parameters())
        mutually_exclusive = [['host_name', 'host_id']]
        required_one_of = [['host_name', 'host_id']]
        # Initialize the Ansible module
        self.module = AnsibleModule(
            argument_spec=self.module_params,
            supports_check_mode=False,
            mutually_exclusive=mutually_exclusive,
            required_one_of=required_one_of
        )

        LOG.info(
            'HAS_PY4PS = %s , IMPORT_ERROR = %s', HAS_PY4PS, IMPORT_ERROR)
        if HAS_PY4PS is False:
            self.module.fail_json(msg=IMPORT_ERROR)
        LOG.info(
            'IS_SUPPORTED_PY4PS_VERSION = %s , VERSION_ERROR = %s',
            IS_SUPPORTED_PY4PS_VERSION, VERSION_ERROR)
        if IS_SUPPORTED_PY4PS_VERSION is False:
            self.module.fail_json(msg=VERSION_ERROR)

        # result is a dictionary that contains changed status and host details
        self.result = {"changed": False, "host_details": {}}

        self.conn = utils.get_powerstore_connection(
            self.module.params, application_type=APPLICATION_TYPE)
        LOG.info(
            'Got Python library connection instance for provisioning on'
            ' PowerStore %s', self.conn)

    def get_powerstore_host_parameters(self):
        return dict(
            host_name=dict(required=False, type='str'),
            host_id=dict(required=False, type='str'),
            initiators=dict(required=False, type='list', elements='str'),
            state=dict(required=True, choices=['present', 'absent'],
                       type='str'),
            initiator_state=dict(required=False, choices=['absent-in-host',
                                                          'present-in-host'],
                                 type='str'),
            new_name=dict(required=False, type='str'),
            os_type=dict(required=False, type='str', choices=['Windows',
                                                              'Linux',
                                                              'ESXi',
                                                              'AIX',
                                                              'HP-UX',
                                                              'Solaris'])
        )

    def get_host(self, host_id):
        '''
        Get details of a given host, given host ID
        '''
        try:
            LOG.info('Getting host %s details', host_id)
            host_from_get = self.conn.provisioning.get_host_details(host_id)
            if host_from_get:
                return host_from_get
            return None
        except Exception as e:
            error_msg = 'Unable to get details of host with ID: {0}' \
                        ' -- error: {1}'.format(host_id, str(e))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

    def get_host_id_by_name(self, host_name):
        try:
            host_info = self.conn.provisioning.get_host_by_name(host_name)
            if host_info:
                if len(host_info) > 1:
                    error_msg = 'Multiple hosts by the same name found'
                    LOG.error(error_msg)
                    self.module.fail_json(msg=error_msg)
                return host_info[0]['id']
        except Exception as e:
            msg = 'Get Host {0} Details for powerstore array failed with ' \
                  'error: {1}'.format(host_name, str(e))
            if isinstance(e, utils.PowerStoreException) and \
                    e.err_code == utils.PowerStoreException.HTTP_ERR \
                    and e.status_code == "404":
                LOG.info(msg)
                return None
            LOG.error(msg)
            self.module.fail_json(msg=msg)

    def create_host(self, host_name):
        '''
        Create host with given initiators
        '''
        try:
            initiators = self.module.params['initiators']
            if initiators is None or not len(initiators):
                error_msg = ("Create host {0} failed as no initiators are"
                             " specified".format(host_name))
                LOG.error(error_msg)
                self.module.fail_json(msg=error_msg)

            os_type = self.module.params['os_type']
            if os_type is None:
                error_msg = ("Create host {0} failed as os_type is not"
                             "specified".format(host_name))
                LOG.error(error_msg)
                self.module.fail_json(msg=error_msg)

            list_of_initiators = []
            initiator_type = []

            for initiator in initiators:
                current_initiator = {}
                current_initiator['port_name'] = initiator
                if initiator.startswith('iqn'):
                    current_initiator['port_type'] = 'iSCSI'
                    initiator_type.append('iSCSI')
                else:
                    current_initiator['port_type'] = 'FC'
                    initiator_type.append('FC')
                list_of_initiators.append(current_initiator)

            if 'iSCSI' in initiator_type and 'FC' in initiator_type:
                error_msg = ('Invalid IQNs. Cannot add both IQN & WWN as part'
                             ' of host. Connect either fiber channel or iSCSI'
                             )
                LOG.error(error_msg)
                self.module.fail_json(msg=error_msg)

            LOG.info("Creating host %s with initiators %s", host_name,
                     list_of_initiators)
            resp = self.conn.provisioning.create_host(
                name=host_name, os_type=os_type,
                initiators=list_of_initiators)
            LOG.info("the response is %s", resp)
            return True

        except Exception as e:
            error_msg = 'Create host {0} failed with error {1}'.format(
                host_name, str(e))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)
        return None

    def _get_add_initiators(self, existing, requested):
        all_inits = existing + requested
        add_inits = list(set(all_inits) - set(existing))
        return add_inits

    def _get_remove_initiators(self, existing, requested):
        rem_inits = list(set(existing).intersection(set(requested)))
        return rem_inits

    def add_host_initiators(self, host, initiators):
        add_list = None

        try:
            existing_inits = []
            if 'host_initiators' in host:
                current_initiators = host['host_initiators']
                if current_initiators:
                    for initiator in current_initiators:
                        existing_inits.append(initiator['port_name'])

            if initiators \
               and (set(initiators).issubset(set(existing_inits))):
                LOG.info('Initiators are already present in host %s',
                         host['name'])
                return False

            add_list = self._get_add_initiators(existing_inits, initiators)
            add_list_with_type = []
            for init in add_list:
                current_initiator = {}
                current_initiator['port_name'] = init
                if init.startswith('iqn'):
                    current_initiator['port_type'] = 'iSCSI'
                else:
                    current_initiator['port_type'] = 'FC'
                add_list_with_type.append(current_initiator)

            if len(add_list_with_type) > 0:

                LOG.info('Adding initiators %s to host %s',
                         add_list_with_type, host['name'])
                resp = self.conn.provisioning.modify_host(
                    host['id'], add_initiators=add_list_with_type)
                LOG.info(
                    'Response from add initiator function %s', resp)
                return True
            else:
                LOG.info('No initiators to add to host %s', host['name'])
                return False
        except Exception as e:
            error_msg = ("Adding initiators {0} to host {1} failed with error"
                         " {2}".format(add_list, host['name'], str(e)))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

    def remove_host_initiators(self, host, initiators):
        remove_list = None
        try:

            existing_inits = []
            current_initiators = host['host_initiators']

            if current_initiators:
                for initiator in current_initiators:
                    existing_inits.append(initiator['port_name'])

            if len(existing_inits) == 0:
                LOG.info(
                    'No initiators are present in host %s', host['name'])
                return False

            remove_list = self._get_remove_initiators(existing_inits,
                                                      initiators)

            if len(remove_list) > 0:

                LOG.info('Removing initiators %s from host %s', remove_list,
                         host['name'])
                resp = self.conn.provisioning.modify_host(
                    host['id'], remove_initiators=remove_list)
                LOG.info(
                    'Response from remove initiator function %s', resp)
                return True
            else:
                LOG.info('No initiators to remove from host %s', host['name'])
                return False
        except Exception as e:
            error_msg = (("Removing initiators {0} from host {1} failed"
                          "with error {2}").format(
                remove_list, host['name'], str(e)))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

    def rename_host(self, host, new_name):
        try:
            self.conn.provisioning.modify_host(host['id'], name=new_name)
            return True
        except Exception as e:
            error_msg = 'Renaming of host {0} failed with error {1}'.format(
                host['name'], str(e))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

    def delete_host(self, host):
        '''
        Delete host from system
        '''
        try:
            self.conn.provisioning.delete_host(host['id'])
            return True
        except Exception as e:
            error_msg = ('Delete host {0} failed with error {1}'.format(
                host['name'], str(e)))
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

    def _create_result_dict(self, changed, host_id):
        self.result['changed'] = changed
        if self.module.params['state'] == 'absent':
            self.result['host_details'] = {}
        else:
            self.result['host_details'] = self.get_host(host_id)

    def perform_module_operation(self):
        '''
        Perform different actions on host based on user parameter
        chosen in playbook
        '''
        state = self.module.params['state']
        initiator_state = self.module.params['initiator_state']
        host_name = self.module.params['host_name']
        host_id = self.module.params['host_id']
        initiators = self.module.params['initiators']
        new_name = self.module.params['new_name']
        os_type = self.module.params['os_type']

        if host_name:
            host_id = self.get_host_id_by_name(host_name)
        if host_id:
            host = self.get_host(host_id)
            host_name = host['name']
        else:
            host = None
        changed = False

        if state == 'present' and not host and host_name:
            if self.module.params['new_name']:
                error_msg = "Operation on host failed as new_name is given " \
                            "for a host that doesnt exist."
                LOG.error(error_msg)
                self.module.fail_json(msg=error_msg)

            if initiator_state != "present-in-host":
                error_msg = "Incorrect initiator_state specified for Create" \
                            " host functionality"
                LOG.error(error_msg)
                self.module.fail_json(msg=error_msg)
            LOG.info('Creating host %s', host_name)
            changed = self.create_host(host_name)
            if changed:
                host_id = self.get_host_id_by_name(host_name)

        if host and os_type and os_type != host["os_type"]:
            error_msg = "os_type cannot be modified for an already existing" \
                        " host."
            LOG.error(error_msg)
            self.module.fail_json(msg=error_msg)

        if (state == 'present' and host and initiator_state ==
                'present-in-host' and initiators and len(initiators) > 0):
            LOG.info('Adding initiators to host %s', host_id)
            changed = (self.add_host_initiators(host, initiators=initiators)
                       or changed)

        if (state == 'present' and host and initiator_state ==
                'absent-in-host' and initiators and len(initiators) > 0):
            LOG.info('Removing initiators from host %s', host_id)
            changed = (self.
                       remove_host_initiators(host, initiators=initiators)
                       or changed)

        if state == 'present' and host and new_name and host_name != new_name:
            LOG.info('Renaming host %s to %s', host_name, new_name)
            changed = self.rename_host(host, new_name)

        if state == 'absent' and host:
            LOG.info('Delete host %s ', host['name'])
            changed = self.delete_host(host) or changed

        self._create_result_dict(changed, host_id)
        # Update the module's final state
        LOG.info('changed %s', changed)
        self.module.exit_json(**self.result)


def main():
    ''' Create PowerStore host object and perform action on it
        based on user input from playbook'''
    obj = PowerStoreHost()
    obj.perform_module_operation()


if __name__ == '__main__':
    main()
